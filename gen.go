// +build ignoreI
package gen

import (
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"text/template"
	"time"

	"github.com/influxdata/telegraf/internal/config"
)

func main() {
	config = config.NewConfig()
	err := config.LoadDirectory()

	if err != nil {
		die(err)
	}

	inputPlugins := config.Inputs
	outputPlugins := config.Outputs

	if len(inputPlugins) == 0 {
		inputPlugins, err = getAllPlugins("input")
		die(err)
	}

	if len(outputPlugins) == 0 {
		outputPlugins, err = getAllPlugins("input")
		die(err)
	}

	allInputs, err := os.Create("./plugins/inputs/all/all.go")
	die(err)
	defer allInputs.Close()

	allOutputs, err := os.Create("./plugins/outputs/all/all.go")
	die(err)
	defer allOutputs.Close()

	allPluginsTemplate.Execute(allInputs, struct {
		Plugins   []string
		Timestamp time.Time
	}{
		Plugins:   inputPlugins,
		Timestamp: time.Now(),
	})

	allPluginsTemplate.Execute(allOutputs, struct {
		Plugins   []string
		Timestamp time.Time
	}{
		Plugins:   outputPlugins,
		Timestamp: time.Now(),
	})
}

func getAllPlugins(directory string) ([]string, error) {
	plugins, err := ioutil.ReadDir(fmt.Sprintf("./plugins/%q/", directory))

	if err != nil {
		log.Fatal(err)
		return nil, err
	}

	var directoryNames []string

	for _, directoryName := range plugins {
		directoryNames = append(directoryNames, directoryName.Name())
	}

	return directoryNames, nil
}

func die(err error) {
	if err != nil {
		log.Fatal(err)
		panic(err)
	}
}

var allPluginsTemplate = template.Must(template.New("").Parse(`// Code generated by go generate; DO NOT EDIT.
// This file was generated by rawkode/telegraf:byo at
// {{ .Timestamp }}
package all

import (
{{- range .Plugins }}
	{{if ne .Name "all"}}
	_ "github.com/influxdata/telegraf/plugins/inputs/{{ .Name }}"
	{{- end }}
{{- end }}
)
`))
